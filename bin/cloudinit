#!/usr/bin/env node

var program = require('commander'),
    app = require('../lib/app'),
    path = require('path'),
    nconf = require('nconf'),
    fs = require('fs'),
    logger = require('../lib/logger');

function getUserHome() {
    return process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
}

program
    .version(require(path.resolve(__dirname, '..', 'package.json')).version)
    .option('-i, --input [file]', 'chef dna or chef rols [file]')
    .option('-o, --outputfile [file]', 'generated cloudinit file')
    .option('-e, --env [name]', 'configuration environment [name]', 'default')
    .parse(process.argv);

if (program.input) {

    logger.info('load environment');

    // load settings from different locations in the following order:
    // - installation dir after npm install -g (__dirname)
    // - home directory of current user
    // - absolute path

    var search = [];

    search.push(path.resolve(__dirname, '..', 'settings', program.env.toString()));
    search.push(path.resolve(getUserHome(), '.cloudinit', program.env.toString()));
    search.push(path.resolve(program.env.toString()));

    var settingsdirectory = null;

    // decide for the right path
    var stats = null;

    for (var i = 0, l = search.length; i < l; i = i + 1) {
        try {
            var dir = search[i];
            // Query the entry
            stats = fs.lstatSync(dir);

            // Is it a directory?
            if (stats.isDirectory()) {
                settingsdirectory = dir

                // abort after first success
                break;
            }
        } catch (e) {
            logger.error(e);
        }
    }

    // load config
    nconf.file({
        file: path.resolve(settingsdirectory, 'settings.json')
    });

    // generate config for this run
    var params = {
        input: path.resolve(__dirname, '..', program.input.toString()),
        output: program.outputfile,
        settings: nconf,
        settingsdirectory: settingsdirectory
    }

    // start converter
    app.convert(params, function (err) {
        // TODO return proper error code
        if (err) {
            logger.error('Something went wrong: %s', err);
        }
    });
}